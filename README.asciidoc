= Machine Architecture 2015 at DIKU

This is a companion git-repository for the course
http://www.webcitation.org/6a2I3GpLv[Machine Architecture (ARK)] at
http://www.diku.dk[DIKU]. If you have any comments or corrections, feel
free to open issues and make pull requests.

== Introduction

A recurring theme in academia and industry is to question how to squeeze
the last ounce of performance out of your digital computer. As the
http://booksite.elsevier.com/9780123838728/[quantitative approach to
computer architecture] has shown, and as best exemplified by the
https://www.youtube.com/watch?v=3paiCK3dlK0[the success of the MIPS
architecture], the best choice of computer architecture, depends on what
you use computers for.

It is often also much cheaper, easier, and faster, to simulate computer
architectures than to build and measure the performance of physical
components.  The overarching theme for this year's mandatory assignments is
to introduce you to the practice of writing dynamic software simulators for
the purposes of later making costly, static hardware choices.

Our language of choice may seem a bit unusual: it is C.

C is, of course, part of the learning objectives for this course.  We hope
that by using C to simulate hardware, you will grow to appreciate the
simplicities, subtleties, and the basic levels of abstraction available in
C. The programs you will write will probably get as close to fiddling with
bits as a C program can get. At the same time, we will simulate a range of
hardware components using high level data structures in C.

C is not an unusual choice for simulating machines. C is often the language
of choice for simulating higher level programming languages, e.g. Python
and Ruby, which can be thought of as advanced, abstract machines. The topic
of simulating programming languages however, is the subject matter for
http://www.webcitation.org/6c4dciEhE[another DIKU course].

This year's mandatory assignments also have a much more guided form. Our
hope is that you will both learn from, and have a great time solving the
assignments.  Assignment texts read like (long) blog posts, and gradually
build up your understanding of both MIPS architecture and C. Of course,
some of the digging, thinking, coding, and debugging is still left as an
exercise for you.

== Tutorials

* link:tutorials/linux-toolchains-and-assembly.asciidoc[Linux, Toolchains, and Assembly]

== Assignments

. link:g-assignments/1st/g1.asciidoc[Interpreting Instructions â€” Simulating Machines]

. link:g-assignments/2nd/g2.asciidoc[Pipelined Execution]

. link:g-assignments/3rd/g3.asciidoc[Caching]

== Important Student Notice

**Don't publicly fork this repository, or otherwise make your course work
public before you have passed this course.**

The Copenhagen University policy is that a student that keeps their work
public, is an accomplice to plagiarism, should any other student choose to copy
their work.

You are of course, completely safe to
https://help.github.com/articles/importing-a-git-repository-using-the-command-line/[clone
this repository], and keep a local, working copy,
https://help.github.com/articles/fetching-a-remote/[pulling this remote] as the
course progresses.

== Future Work and Future Use

The DIKU courses on Machine Architecture, Operating Systems and Concurrent
Programming, and Computer Networks stand to be combined into a one-semester
course called Computer Systems, as of fall 2016.

Our changes to the Machine Architecture 2015 course make a first
step towards unifying these courses into one coherent whole.

Our goal has been to make sure that students gain sufficient skills in C,
and gradually build up a simulator advanced enough to later host an
operating system.  The next step is to build upon these changes in the
Operating Systems and Concurrent Programming course, and later, the course
on Computer Networks, in the spring of 2016.
